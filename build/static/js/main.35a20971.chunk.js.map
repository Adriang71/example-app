{"version":3,"sources":["Actions.js","EventReducer.js","EventForm.jsx","EventList.jsx","App.js","serviceWorker.js","index.js"],"names":["loadEvent","dispatch","type","fetch","then","response","json","error","initialState","isLoading","events","errors","useStyles","makeStyles","theme","wrapper","margin","spacing","form","width","validationSchema","name","required","value","message","minLength","lastName","email","pattern","date","EventForm","onSubmit","useForm","register","control","handleSubmit","setValue","useState","selectedDate","setSelectedDate","useDispatch","React","useEffect","schema","Object","keys","forEach","registerValidationSchema","classes","Grid","container","direction","justify","alignItems","item","className","data","event","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","as","TextField","label","defaultValue","Boolean","helperText","DatePicker","format","onChange","moment","Button","variant","color","root","minWidth","bullet","display","transform","pos","marginBottom","EventList","useSelector","state","bull","length","reverse","map","List","key","id","ListItem","Card","CardContent","Typography","component","CardActions","size","store","createStore","action","applyMiddleware","thunkMiddleware","window","location","hostname","match","ReactDOM","render","utils","MomentUtils","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.35a20971.chunk.js","sourcesContent":["export const LOAD_EVENT_REQUEST = 'LOAD_EVENT_REQUEST';\nexport const LOAD_EVENT_SUCCESS = 'LOAD_EVENT_SUCCESS';\nexport const LOAD_EVENT_FAILURE = 'LOAD_EVENT_FAILURE';\nexport const POST_EVENT_REQUEST = 'POST_EVENT_REQUEST';\nexport const POST_EVENT_SUCCESS = 'POST_EVENT_SUCCESS';\nexport const POST_EVENT_FAILURE = 'POST_EVENT_FAILURE';\n\nexport function loadEvent() {\n  return (dispatch) => {\n    dispatch({\n      type: 'LOAD_EVENT_REQUEST',\n    })\n\n    fetch(`api/events`).then(\n      response => response.json())\n      .then(response =>\n        dispatch({\n          type: 'LOAD_EVENT_SUCCESS',\n          response\n        }),\n      error => {\n        return dispatch({\n          type: 'LOAD_EVENT_FAILURE',\n          error: error.type,\n        })\n      }\n    )\n  }\n}\n\nexport function postEvent(event) {\n  return dispatch => {\n    dispatch({\n      type: 'POST_EVENT_REQUEST',\n    })\n\n    fetch('api/new/event', {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer',\n      body: JSON.stringify(event)\n    }).then(\n      response => response.json())\n      .then(response => {\n        dispatch({\n          type: 'POST_EVENT_SUCCESS',\n          response\n        })\n        dispatch(loadEvent())\n      },\n      error => {\n        dispatch({\n          type: 'POST_EVENT_FAILURE',\n          error: error.type,\n        })\n      }\n    );\n\n  }\n}","import {\n  LOAD_EVENT_REQUEST,\n  LOAD_EVENT_SUCCESS,\n  LOAD_EVENT_FAILURE,\n} from './Actions'\n\nconst initialState = {\n  isLoading: false,\n  events: [],\n  errors: null,\n}\n\nexport default function eventReducer(state = initialState, action) {\n  switch(action.type) {\n    case LOAD_EVENT_REQUEST:\n      return { ...state, isLoading: true }\n   case LOAD_EVENT_SUCCESS:\n      return { ...state, isLoading: false, events: action.response }\n    case LOAD_EVENT_FAILURE:\n      return { ...state, isLoading: false, errors: action.error }\n    default:\n      return state\n  }\n}","import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch } from 'react-redux'\nimport { postEvent } from './Actions';\nimport { Controller, ErrorMessage } from \"react-hook-form\";\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { DatePicker } from '@material-ui/pickers';\n\nconst useStyles = makeStyles(theme => ({\n  wrapper: {\n    margin: theme.spacing(5),\n  },\n  form: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: 200,\n    },\n  },\n}));\n\nconst validationSchema = {\n  name: {\n    required: { value: true, message: \"Required*\" },\n    minLength: { value: 3, message: \"Name should contain minimum 3 leather\" }\n  },\n  lastName: {\n    required: { value: true, message: \"Required*\" },\n    minLength: { value: 3, message: \"Last name should contain minimum 3 leather\" }\n  },\n  email: {\n    required: { value: true, message: \"Required*\" },\n    minLength: { value: 3, message: \"Email should contain minimum 3 leather\" },\n    pattern: {\n      value: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      message: \"Incorrect e-mail address.\"\n    }\n  },\n  date: {\n    required: { value: true, message: \"Required*\" },\n  }\n}\n\nconst registerValidationSchema = (schema, register) =>\n  Object.keys(schema).forEach(name =>  register({ name }, schema[name]));\n\nexport default function EventForm({onSubmit}) {\n  const { register, control, handleSubmit, setValue, errors } = useForm();\n  const [selectedDate, setSelectedDate] = useState(null);\n  const dispatch = useDispatch();\n\n  const formSubmission = data =>\n    dispatch(postEvent(data))\n\n\n  const handleDateChange = date => {\n    setSelectedDate(date);\n  };\n\n  React.useEffect(() => {\n    registerValidationSchema(validationSchema, register)\n  }, [register]);\n\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n      <Grid item className={classes.wrapper}>\n        <form\n        className={classes.form}\n        onSubmit={onSubmit || handleSubmit(formSubmission)}>\n          <Controller\n            as={<TextField />}\n            name=\"name\"\n            label=\"Name\"\n            control={control}\n            defaultValue=\"\"\n            error={Boolean(errors.name)}\n            helperText={\n              <ErrorMessage errors={errors} name=\"name\"/>\n            }\n          />\n\n          <Controller\n            as={<TextField />}\n            name=\"lastName\"\n            label=\"Lastname\"\n            control={control}\n            defaultValue=\"\"\n            error={Boolean(errors.lastName)}\n            helperText={\n              <ErrorMessage errors={errors} name=\"lastName\"/>\n            }\n          />\n\n          <Controller\n            as={<TextField />}\n            name=\"email\"\n            label=\"Email\"\n            control={control}\n            defaultValue=\"\"\n            error={Boolean(errors.email)}\n            helperText={\n              <ErrorMessage errors={errors} name=\"email\"/>\n            }\n            />\n\n          <DatePicker\n            value={selectedDate}\n            format=\"YYYY/MM/DD\"\n            label=\"Date\"\n            name=\"date\"\n            error={Boolean(errors.date)}\n            onChange={moment => {\n              handleDateChange(moment.format(\"YYYY/MM/DD\"));\n              setValue(\"date\", moment.format(\"YYYY/MM/DD\"))\n            }}\n            helperText={\n              <ErrorMessage errors={errors} name=\"date\"/>\n            }\n          />\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n              Submit\n            </Button>\n          </Grid>\n        </form>\n      </Grid>\n    </Grid>\n  );\n}\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport Grid from '@material-ui/core/Grid';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { loadEvent } from './Actions';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport default function EventList() {\n  const isLoading = useSelector(state => state.isLoading)\n  const events = useSelector(state => state.events)\n  const dispatch = useDispatch()\n\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>•</span>;\n\n  React.useEffect(() => {\n    dispatch(loadEvent())\n  }, [dispatch]);\n\n  if(isLoading) return <Grid item>Loading...</Grid>\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n    >\n    {isLoading && <div>Loading...</div>}\n    {!isLoading && events.length > 0 &&\n      events.reverse().map(event => (\n        <List key={event.id}>\n          <ListItem >\n            <Card className={classes.root}>\n              <CardContent>\n                <Typography variant=\"h6\" component=\"h3\">\n                  {event.name} {event.lastName}\n                </Typography>\n                <Typography className={classes.pos} color=\"textSecondary\">\n\n                  Event date {bull} {event.date}\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                  {event.email}\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button size=\"small\">Check Event</Button>\n              </CardActions>\n            </Card>\n          </ListItem>\n        </List>\n      ))\n    }\n    </Grid>\n  );\n}","import React from \"react\";\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport eventReducer from './EventReducer'\nimport EventForm from './EventForm';\nimport EventList from './EventList';\n\nconst store = createStore(eventReducer, applyMiddleware(thunkMiddleware))\n\nexport default function App() {\n  return (\n    <MuiPickersUtilsProvider utils={MomentUtils}>\n      <Provider store={store}>\n        <EventForm />\n        <EventList />\n      </Provider>\n    </MuiPickersUtilsProvider>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}